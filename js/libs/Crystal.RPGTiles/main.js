class TilePalette{static#t=!1;static#e=new Map;static#s=new Map;static get isLoaded(){return this.#t}static async Set(){if(this.#t)return;const t=await FetchFile("data/tilepalettes.json"),e=await t.json();this.#e=new Map(e.map((t=>[t.name,t]))),this.#t=!0}static async Load(t){const e=this.#e.get(t),s=new TilePalette;s.name=t;const a=[],unloadCall=()=>{for(let t=0;t<a.length;t++)a[t].onUnload.Remove(unloadCall);this.Unload(t)};for(let t=0;t<e.textures.length;t++){if(0===e.textures.sprites?.length)continue;const n=Resources.Find(e.textures[t].src);n.onUnload.Add(unloadCall),a.push(n);const l=e.textures[t].sprites;for(let t=0;t<l.length;t++){const e=null!=l[t].name?n.sprites.find((e=>e.name===l[t].name)):n.sprites[l[t].index??0];s.sprites.set(l[t].id,e.Duplicate())}}this.#s.set(t,s)}static Unload(t){this.#s.delete(t)}static UnloadAll(){this.#s=new Map}static Find(t){return this.#s.get(t)}name="";sprites=new Map}TilePalette.Set();class Tile{palette="";spriteID=0;position=Vector2.zero;sprite=null;constructor(t,e,i){this.palette=t,this.spriteID=e??0,this.position=i??Vector2.zero}Duplicate(){return new Tile(this.palette,this.spriteID,this.position)}}class Tilemap extends Renderer{#t=!1;#e=!0;#r=!1;#i=new Map;#s=new Map;#a=Vector2.zero;#o=new Bounds(new Vector2(NaN,NaN));#l=Matrix3x3.identity;#h=null;#n=null;#u=null;#d=null;#c=null;mergeResolution=16;grid=null;get meshChanged(){return this.#e}get bounds(){return new Bounds(this.#o.center,this.#o.size)}get localToWorldMatrix(){return Matrix3x3.Multiply(this.grid.transform.localToWorldMatrix,this.#l)}get mergedRendering(){return null!=this.#d}get materials(){return Array.from(this.#s).map((t=>t[1].material))}#x=class{colorsUpdated=!1;arraysUpdated=!1;currentIndex=0;uMatrixID=0;geometryBufferID=0;textureBufferID=0;colorBufferID=0;aVertexPosID=0;aTexturePosID=0;aColorID=0;tiles=[];vertexArray=[];textureArray=[];color=[];colorArray=[];indexes=[];trisCounts=[];scaler=Vector2.zero;texture=null;material=null;parent=null;#m(t){const e=t.sprite.vertices,r=e[0],i=t.sprite.triangles,s=Vector2.Divide(Vector2.Subtract(this.parent.grid.CellToWorldUnscaled(new Vector2(t.position.x,-t.position.y)),Vector2.Divide(Vector2.Scale(new Vector2(t.sprite.rect.width,t.sprite.rect.height),t.sprite.pivot),this.texture.pixelPerUnit)),this.scaler);let a=[],o=[];for(let t=0;t<i.length;t++){const l=e[i[t]],h=2*t;a[h]=l.x-r.x+s.x,a[h+1]=l.y-r.y+s.y,o[h]=l.x,o[h+1]=l.y}return{vertexArray:a,textureArray:o,trisCount:i.length}}SetMaterial(t){this.material?.Unload(),this.material=t.Duplicate(),this.material.SetSampler2D("uSampler",0),this.uMatrixID=this.material.GetPropertyNameID("uMatrix"),this.geometryBufferID=this.material.AddBuffer("geometry",null,2),this.textureBufferID=this.material.AddBuffer("texture",null,2),this.colorBufferID=this.material.AddBuffer("color",null,4),this.aVertexPosID=this.material.GetAttributeNameID("aVertexPos"),this.aTexturePosID=this.material.GetAttributeNameID("aTexturePos"),this.aColorID=this.material.GetAttributeNameID("aColor"),this.arraysUpdated=!0}SetColors(t){this.color=t,this.colorArray=[];for(let e=0;e<this.tiles.length;e++)this.colorArray.push(...t,...t,...t,...t,...t,...t);this.colorsUpdated=!0}UpdateMesh(){const t=this.texture.pixelPerUnit,e=this.texture.width,r=this.texture.height,i=e/t,s=r/t;this.scaler=Vector2.Scale(e>r?new Vector2(1,r/e):new Vector2(e/r,1),e>r?i:s),this.currentIndex=0,this.vertexArray=[],this.textureArray=[],this.trisCounts=[],this.indexes=[];for(let t=0;t<this.tiles.length;t++){const e=this.#m(this.tiles[t]);this.vertexArray.push(...e.vertexArray),this.textureArray.push(...e.textureArray),this.trisCounts.push(e.trisCount-1),this.indexes.push(this.currentIndex),this.currentIndex+=e.trisCount}this.arraysUpdated=!0,this.SetColors(this.color)}Add(t){this.tiles.push(t);const e=this.#m(t);this.vertexArray.push(...e.vertexArray),this.textureArray.push(...e.textureArray),this.trisCounts.push(e.trisCount-1),this.indexes.push(this.currentIndex),this.currentIndex+=e.trisCount,this.colorArray.push(...this.color,...this.color,...this.color,...this.color,...this.color,...this.color),this.arraysUpdated=!0,this.colorsUpdated=!0}Remove(t){const e=this.tiles.indexOf(t),r=12*e;this.tiles.splice(e,1),this.vertexArray.splice(r,12),this.textureArray.splice(r,12),this.trisCounts.splice(e,1),this.indexes.pop(),this.currentIndex-=t.sprite.triangles.length,this.colorArray.splice(0,24),this.arraysUpdated=!0,this.colorsUpdated=!0}};constructor(t){super(t),this.Reload()}#p(){this.#h=this.color.Duplicate();const t=[this.color.r,this.color.g,this.color.b,this.color.a];null==this.#d?this.#s.forEach((e=>e.SetColors(t))):this.material.SetBuffer(this.colorBufferID,[...t,...t,...t,...t,...t,...t])}#g(t){t.colorsUpdated&&(t.material.SetBuffer(t.colorBufferID,t.colorArray),t.colorsUpdated=!1),t.arraysUpdated&&(t.material.SetBuffer(t.geometryBufferID,t.vertexArray),t.material.SetBuffer(t.textureBufferID,t.textureArray),t.arraysUpdated=!1);const e=Matrix3x3.Multiply(this.renderMatrix,Matrix3x3.Scale(t.scaler));t.material.SetMatrix(t.uMatrixID,e.matrix[0][0],e.matrix[0][1],e.matrix[0][2],e.matrix[1][0],e.matrix[1][1],e.matrix[1][2],e.matrix[2][0],e.matrix[2][1],e.matrix[2][2]),t.material.SetAttribute(t.aVertexPosID,t.geometryBufferID),t.material.SetAttribute(t.aTexturePosID,t.textureBufferID),t.material.SetAttribute(t.aColorID,t.colorBufferID);const r=t.material.gl;r.useProgram(t.material.program),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,t.texture.GetNativeTexture()),Application.gl_multidraw.multiDrawArraysWEBGL(r.TRIANGLE_STRIP,t.indexes,0,t.trisCounts,0,t.tiles.length),r.useProgram(null),r.flush()}Reload(){const t=this.updatedMaterial;super.Reload(),this.#s.forEach((t=>t.SetMaterial(this.material))),t&&(null!=this.#d&&(this.material.SetBuffer(this.geometryBufferID,this.#c),this.material.SetBuffer(this.textureBufferID,this.#c)),this.#p())}ForceMeshUpdate(){this.#t||(this.grid=this.GetComponentInParent("Grid")),this.#a=Vector2.Add(this.grid.cellSize,this.grid.cellGap),this.#s.forEach((t=>{t.SetMaterial(this.material),t.UpdateMesh()})),this.#e=!1,this.#t=!0,this.#p(),super.ForceMeshUpdate()}RecalcBounds(){if(null==this.grid||null==this.#n&&null==this.#u)return void super.RecalcBounds();const t=new Bounds;t.SetMinMax(this.grid.CellToWorld(Vector2.Add(this.#n,new Vector2(-.5,-.5))),this.grid.CellToWorld(Vector2.Add(this.#u,new Vector2(.5,.5)))),this.#o=t,super.RecalcBounds()}Render(){this.#a.Equals(Vector2.Add(this.grid.cellSize,this.grid.cellGap))||this.ForceMeshUpdate(),this.#h.Equals(this.color)||this.#p(),null==this.#d?(this.#s.size>0&&this.#s.forEach((t=>this.#g(t))),this.#r&&this.#f()):this.#y()}#y(){const t=this.material.gl,e=this.renderMatrix;this.material.SetMatrix(this.uMatrixID,e.matrix[0][0],e.matrix[0][1],e.matrix[0][2],e.matrix[1][0],e.matrix[1][1],e.matrix[1][2],e.matrix[2][0],e.matrix[2][1],e.matrix[2][2]),this.material.SetAttribute(this.aVertexPosID,this.geometryBufferID),this.material.SetAttribute(this.aTexturePosID,this.textureBufferID),this.material.SetAttribute(this.aColorID,this.colorBufferID),t.useProgram(this.material.program),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,this.#d.texture.GetNativeTexture()),t.drawArrays(t.TRIANGLE_STRIP,0,5),t.useProgram(null)}GetTile(t){return this.#i.get(`${t.x}_${t.y}`)}async AddTile(t){const e=this.GetTile(t.position);if(null!=e){if(e.spriteID===t.spriteID)return;this.RemoveTile(t.position)}else null!=this.#n?(this.#n=Vector2.Min(this.#n,t.position),this.#u=Vector2.Max(this.#u,t.position)):(this.#n=t.position.Duplicate(),this.#u=t.position.Duplicate());this.#i.set(`${t.position.x}_${t.position.y}`,t);let r=TilePalette.Find(t.palette);null==r&&(await TilePalette.Load(t.palette),r=TilePalette.Find(t.palette)),t.sprite=r.sprites.get(t.spriteID);let i=this.#s.get(t.sprite.texture);const s=null==i;s&&(i=new this.#x,i.texture=t.sprite.texture,i.color=[this.color.r,this.color.g,this.color.b,this.color.a],i.parent=this,this.#s.set(t.sprite.texture,i)),this.#t?(s?(i.tiles.push(t),i.SetMaterial(this.material),i.UpdateMesh()):i.Add(t),this.RecalcBounds()):i.tiles.push(t)}RemoveTile(t){const e=this.GetTile(t);if(null==e)return;this.#i.delete(`${t.x}_${t.y}`),this.#i.forEach((t=>{const e=t.position;if(0===i)return this.#n=e.Duplicate(),void(this.#u=e.Duplicate());this.#n=Vector2.Min(this.#n,e),this.#u=Vector2.Max(this.#u,e)})),0===this.#i.size&&(this.#n=null,this.#u=null,this.#o=new Bounds(new Vector2(NaN,NaN))),this.RecalcBounds();const r=this.#s.get(e.sprite.texture);if(this.#t)r.Remove(e);else{const t=r.tiles.indexOf(e);r.tiles.splice(t,1)}0===r.tiles.length&&this.#s.delete(e.sprite.texture)}async#f(){this.#r=!1;const t=this.mergeResolution,e=await TilemapMerger.Merge({res:t,gridSize:this.#a,min:this.#n,max:this.#u,tiles:Array.from(this.#i).map((t=>{const e=t[1].sprite;return{sprite:e,bitmap:e.texture.bitmap,pos:t[1].position}}))}),r=new Texture(e,"");await r.Load();const i=r.sprites[0],s=i.vertices,a=i.triangles;let o=[];for(let t=0;t<a.length;t++){const e=s[a[t]];o.push(e.x,e.y)}const l=r.width,h=r.height,n=l/t,u=h/t;this.#c=o,this.material.SetBuffer(this.geometryBufferID,o),this.material.SetBuffer(this.textureBufferID,o),this.#l=Matrix3x3.TRS(Vector2.Add(new Vector2(-.5*n,-.5*u),Vector2.Scale(Vector2.Add(this.#n,this.#u),Vector2.Scale(this.#a,new Vector2(.5,-.5)))),0,Vector2.Scale(l>h?new Vector2(1,h/l):new Vector2(l/h,1),l>h?n:u)),this.#d=i,this.#p()}Merge(){this.Unmerge(),this.#r=!0}Unmerge(){this.mergedRendering&&(this.#d.texture.Unload(),this.#d=null,this.#l=Matrix3x3.identity)}Duplicate(){const t=new Tilemap(this.material.Duplicate());return this.#i.forEach((e=>t.AddTile(e.Duplicate()))),this.mergedRendering&&t.Merge(),t.color=this.color.Duplicate(),t.sortingLayer=this.sortingLayer,t.sortingOrder=this.sortingOrder,t.mergeResolution=this.mergeResolution,t}}class TilemapMerger{static#e=[];static#t=null;static async Merge(e){null==this.#t&&(this.#t=new Worker("js/libs/Crystal.RPGTiles/MergeWorker.js"),this.#t.onmessage=e=>this.#s(e.data),this.#t.postMessage(e));const t={data:e};return this.#e.push(t),await new Promise((e=>t.resolve=e)),t.output}static#s(e){const t=this.#e.shift();t.output=URL.createObjectURL(e),t.resolve(),this.#e.length>0?this.#t.postMessage(this.#e[0].data):(this.#t.terminate(),this.#t=null)}}
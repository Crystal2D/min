class FontAtlas{forcedLineHeight=!0;lineHeight=16;charSpacing=1;texture=null;constructor(t,e){this.texture=t;for(let t=0;t<e.length;t++){const r=new Sprite(e[t].character,this.texture,e[t].rect);this.texture.sprites.push(r)}}Unload(){}GetGlyph(t){return this.texture.sprites.find((e=>e.name===t))}}class FontGlyph{character="";rect=null;constructor(c,t){this.character=c??"",this.rect=t??new Rect}}class TextChar{#t=[];#r=Vector2.zero;#e=Vector2.zero;#s=new Color(1,1,1);trisCount=0;textureArray=[];localVertexArray=[];colorArray=[];parent=null;get vertexArray(){return this.#t}set vertexArray(t){this.#t=t,this.#o()}get position(){return this.#r}set position(t){this.#r=t,this.#o()}get offset(){return this.#e}set offset(t){this.#e=t,this.#o()}get color(){return this.#s}set color(t){this.#s=t;const r=[t.r,t.g,t.b,t.a];this.colorArray=[...r,...r,...r,...r,...r,...r],this.parent.RemapGraphicArrays()}#o(){const t=this.#r.x+this.#e.x,r=this.#r.y-this.#e.y;let e=[...this.#t];for(let s=0;s<this.trisCount;s++){const o=2*s;e[o]+=t,e[o+1]-=r}this.localVertexArray=e}}class Text extends Renderer{#t=!1;#e=!1;#i=!1;#s=!1;#h=0;#r=0;#n=0;#a=8.5;#o=1.5;#l=1;#c="";#g=[];#u=[];#d=[];#f=[];#p=Vector2.zero;#x=Vector2.zero;#w=new Bounds;#m=Vector2.one;#S=null;#V=null;#y=null;#z=null;characters=[];pivot=new Vector2(.5,.5);get meshChanged(){return this.#t}get bounds(){return new Bounds(this.#w.center,this.#w.size)}get fontSize(){return this.#l}set fontSize(t){this.#l=t,this.#v()}get font(){return this.#S}set font(t){this.#S=t,this.#A(),this.#v()}get width(){return this.#a}set width(t){this.#a=t,this.#t=!0}get height(){return this.#o}set height(t){this.#o=t,this.#t=!0}get overflowWidth(){return this.#i}set overflowWidth(t){this.#i=t,this.#t=!0}get overflowHeight(){return this.#s}set overflowHeight(t){this.#s=t,this.#t=!0}get horizontalAlign(){return this.#h}set horizontalAlign(t){this.#h=t,this.#e=!0}get verticalAlign(){return this.#r}set verticalAlign(t){this.#r=t,this.#e=!0}get text(){return this.#c}set text(t){this.#c!==t&&(this.#c=t,this.#A())}get pixelPerUnit(){return this.font.texture.pixelPerUnit}get localToWorldMatrix(){return Matrix3x3.Multiply(this.transform.localToWorldMatrix,Matrix3x3.TRS(Vector2.Scale(this.pivot,new Vector2(-this.#a,-this.#o)),0,this.#m))}get lineHeight(){return this.#y}set lineHeight(t){this.#y=t,this.#t=!0}get charSpacing(){return this.#z}set charSpacing(t){this.#z=t,this.#A()}#M=class{lineBreak=!1;space=!1;width=0;height=0;charSpacing=1;sprites=[];Add(t){this.sprites.push(t)}Update(){let t=0,e=0;for(let i=0;i<this.sprites.length;i++){const s=this.sprites[i].rect;t+=s.width+(this.charSpacing-1),e<s.height&&(e=s.height)}this.width=t,this.height=e}};constructor(t,e){super(e),this.Reload(),this.font=t}#G(t,e){const i=t.vertices,s=i[0],h=t.triangles;let r=[],n=[];for(let t=0;t<h.length;t++){const e=i[h[t]],a=2*t;r[a]=e.x-s.x,r[a+1]=e.y-s.y,n[a]=e.x,n[a+1]=e.y}const a=new TextChar;return a.parent=this,a.trisCount=h.length,a.vertexArray=r,a.textureArray=n,a.position=e,a.color=this.#V.Duplicate(),a}#A(){const t=this.#c;let e=[new this.#M];for(let i=0;i<t.length;i++){const s="\n"===t[i];let h=null;s||(h=this.font.GetGlyph(t[i]))," "!==t[i]?s?(0!==i&&(e[e.length-1].charSpacing=this.#z??this.font.charSpacing,e[e.length-1].Update(),e.push(new this.#M)),e[e.length-1].lineBreak=!0,e.push(new this.#M)):(e[e.length-1].space&&(e[e.length-1].charSpacing=this.#z??this.font.charSpacing,e[e.length-1].Update(),e.push(new this.#M)),e[e.length-1].Add(h)):(0===i||e[e.length-1].space||(e[e.length-1].charSpacing=this.#z??this.font.charSpacing,e[e.length-1].Update(),e.push(new this.#M)),e[e.length-1].Add(h),e[e.length-1].space=!0)}e[e.length-1].charSpacing=this.#z??this.font.charSpacing,e[e.length-1].Update(),this.#g=e,this.#t=!0}#v(){const t=this.pixelPerUnit/this.#l,e=this.font.texture,i=e.width,s=e.height;this.#m=Vector2.Scale(i>s?new Vector2(1,s/i):new Vector2(i/s,1),i>s?i/t:s/t),this.#t=!0}#C(t,e){const i=this.#S.texture.width;let s=e.x,h=[];for(let r=0;r<t.length;r++){const n=t[r],a=(n.rect.width+((this.#z??this.font.charSpacing)-1))/i,o=this.#G(n,new Vector2(s,-e.y));h.push(o),s+=a}return h}#b(){const t=this.pixelPerUnit/this.#l,e=this.#a/(this.#S.texture.width/t),i=this.#o/(this.#S.texture.height/t),s=this.#u,h=.5*(i-this.#n)*this.#r,r=this.characters;let n=0,a=0,o=s[0].count,l=.5*(e-s[0].size)*this.#h,c=[],g=[],u=[],d=[],f=[];for(let t=0;t<r.length;t++){if(0!==this.horizontalAlign){if(0===o){a++;const t=s[a];o=t.count,l=.5*(e-t.size)*this.#h}o--}r[t].offset=new Vector2(l,h);const i=r[t].trisCount,p=n+i;c.push(...r[t].localVertexArray),g.push(...r[t].textureArray),u.push(...r[t].colorArray),f.push(n),n=p,d.push(i-1)}this.material.SetBuffer(this.geometryBufferID,c),this.material.SetBuffer(this.textureBufferID,g),this.material.SetBuffer(this.colorBufferID,u),this.#d=d,this.#f=f,this.#e=!1}Reload(){this.updatedMaterial&&(this.#t=!0),super.Reload()}RecalcBounds(){const t=this.pivot,e=this.#x;let i=Vector2.zero;switch(this.horizontalAlign){case 0:i.x+=e.x;break;case 2:i.x-=e.x}switch(this.verticalAlign){case 0:i.y-=e.y;break;case 2:i.y+=e.y}const s=new Bounds(Vector2.zero,this.#p),h=this.transform.localToWorldMatrix,r=Matrix3x3.Multiply(h,Matrix3x3.Translate(s.min)),n=Matrix3x3.Multiply(h,Matrix3x3.Translate(new Vector2(s.min.x,s.max.y))),a=Matrix3x3.Multiply(h,Matrix3x3.Translate(new Vector2(s.max.x,s.min.y))),o=Matrix3x3.Multiply(h,Matrix3x3.Translate(s.max));s.SetMinMax(new Vector2(Math.min(r.GetValue(2,0),n.GetValue(2,0),a.GetValue(2,0),o.GetValue(2,0)),Math.min(-r.GetValue(2,1),-n.GetValue(2,1),-a.GetValue(2,1),-o.GetValue(2,1))),new Vector2(Math.max(r.GetValue(2,0),n.GetValue(2,0),a.GetValue(2,0),o.GetValue(2,0)),Math.max(-r.GetValue(2,1),-n.GetValue(2,1),-a.GetValue(2,1),-o.GetValue(2,1))));const l=Matrix3x3.Multiply(h,Matrix3x3.Translate(Vector2.Add(i,new Vector2((.5-t.x)*this.#a,(.5-t.y)*this.#o))));s.center=new Vector2(l.GetValue(2,0),-l.GetValue(2,1)),this.#w=s,super.RecalcBounds()}ForceMeshUpdate(){this.#V=this.color.Duplicate();const t=this.pixelPerUnit/this.#l,e=this.#S.texture.width,i=this.#S.texture.height,s=e/t,h=i/t,r=this.#a/s,n=this.#o/h,a=(this.#y??this.font.lineHeight)/i,o=(this.#z??this.font.charSpacing)-1;let l=0,c=0,g=a,u=[],d=[{size:0,count:0}],f=0;for(let t=0;t<this.#g.length;t++){const s=this.#g[t];if(s.lineBreak){if(!this.#s&&c+2*g>n)break;if(0!==l){const t=d[d.length-1].size;t>f&&(f=t),d.push({size:0,count:0})}c+=g,l=0,g=a;continue}const h=(s.width-o)/e,p=!this.#i&&l+h>r;if(0===l&&p&&!s.space){const t=s.sprites;let h=!1;for(let s=0;s<t.length;s++){const p=t[s],x=(p.rect.width+o)/e;if(!this.overflowWidth&&l+x>r){if(!this.#s&&c+2*g>n){h=!0;break}const t=d[d.length-1].size;t>f&&(f=t),c+=g,l=0,g=a,d.push({size:0,count:0})}const w=p.rect.height/i;if(!this.#S.forcedLineHeight&&g<w&&(g=w),!this.#s&&c+g>n){h=!0;break}const m=this.#G(p,new Vector2(l,-c));u.push(m),l+=x,d[d.length-1].size+=x,d[d.length-1].count++}if(h)break;continue}if(p){if(!this.#s&&c+2*g>n)break;const t=d[d.length-1].size;t>f&&(f=t),c+=g,l=0,g=a,d.push({size:0,count:0})}const x=s.height/i;if(!this.#S.forcedLineHeight&&g<x&&(g=x),!this.#s&&c+g>n)break;if(s.space){if(0===l)continue;if(!this.#i){const i=this.#g[t+1];if(null==i||l+h+(i.width-o)/e>r){const t=d[d.length-1].size;t>f&&(f=t),c+=g,l=0,g=a,d.push({size:0,count:0});continue}}}const w=this.#C(s.sprites,new Vector2(l,c));u.push(...w),l+=h,d[d.length-1].size+=h,d[d.length-1].count+=s.sprites.length}const p=d[d.length-1].size;p>f&&(f=p),c+=a,this.characters=u,this.#u=d,this.#n=c;const x=new Vector2(f*s,(this.#s?c:Math.min(c,n))*h);this.#p=x,this.#x=Vector2.Scale(new Vector2(x.x-r*s,n*h-x.y),.5),this.#t=!1,this.#b(),super.ForceMeshUpdate()}RemapGraphicArrays(){this.#e=!0}Render(){this.#V.Equals(this.color)||this.ForceMeshUpdate();const t=this.characters;if(0===t.length)return;this.#e&&this.#b();const e=this.material.gl,i=this.renderMatrix;this.material.SetMatrix(this.uMatrixID,i.matrix[0][0],i.matrix[0][1],i.matrix[0][2],i.matrix[1][0],i.matrix[1][1],i.matrix[1][2],i.matrix[2][0],i.matrix[2][1],i.matrix[2][2]),this.material.SetAttribute(this.aVertexPosID,this.geometryBufferID),this.material.SetAttribute(this.aTexturePosID,this.textureBufferID),this.material.SetAttribute(this.aColorID,this.colorBufferID),e.useProgram(this.material.program),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.font.texture.GetNativeTexture()),Application.gl_multidraw.multiDrawArraysWEBGL(e.TRIANGLE_STRIP,this.#f,0,this.#d,0,t.length),e.useProgram(null)}Duplicate(){const t=new Text(this.font,this.material.Duplicate());return t.color=this.color.Duplicate(),t.sortingLayer=this.sortingLayer,t.sortingOrder=this.sortingOrder,t.overflowWidth=this.overflowWidth,t.overflowHeight=this.overflowHeight,t.width=this.width,t.height=this.height,t.text=this.text,t.pivot=this.pivot,t.fontSize=this.fontSize,t.horizontalAlign=this.horizontalAlign,t.verticalAlign=this.verticalAlign,t.lineHeight=this.lineHeight,t}}class TextAnchorX{static get Left(){return 0}static get Center(){return 1}static get Right(){return 2}}class TextAnchorY{static get Top(){return 0}static get Middle(){return 1}static get Bottom(){return 2}}
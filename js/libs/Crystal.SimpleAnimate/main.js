class AnimationClip{loop=!0;interval=0;sprites=[]}class AnimatorNode{transitions=[];get currentTime(){return 0}get duration(){return 0}}class AnimatorMotion extends AnimatorNode{#t=!1;#e=!1;#i=0;#s=0;#r=0;speed=1;name="animation";animation=null;get hasStarted(){return this.#t}get hasEnded(){return this.#e}get currentTime(){return Math.min(this.#s,this.duration)}get duration(){return this.animation.sprites.length*this.animation.interval}get normalizedTime(){return this.currentTime/this.duration}get reversed(){return this.speed<0}set reversed(t){this.speed=Math.abs(this.speed)*(t?-1:1)}Update(t){if(!this.#e&&0!==this.speed&&0!==this.animation.sprites.length){if(this.#i>0){const t=Time.deltaTime*Math.abs(this.speed);return this.#i-=t,void(this.#s+=t)}if((this.reversed&&this.#r<0||this.#r>=this.animation.sprites.length)&&this.End(),this.#t){if(this.#e)return}else this.Start();t.sprite=this.animation.sprites[this.#r],this.#r+=this.reversed?-1:1,this.#i=this.animation.interval}}Start(){this.#t=!0,this.#e=!1,this.#s=0,this.#r=this.reversed?this.animation.sprites.length-1:0}End(){this.#e=!0,this.animation.loop&&(this.#t=!1)}}class AnimatorConditionMode{static get If(){return 0}static get IfNot(){return 1}static get Greater(){return 2}static get Less(){return 3}static get Equals(){return 4}static get NotEquals(){return 5}}class AnimatorCondition{threshold=0;mode=0;parameter=""}class AnimatorControllerParameterType{static get Bool(){return 0}static get Trigger(){return 1}static get Number(){return 2}}class AnimatorControllerParameter{defaultBool=!1;lastTriggerState=!1;defaultNumber=0;type=0;value=null}class AnimatorTransition{isExit=!0;exitTime=1;nextNode="";conditions=[]}class AnimatorController{nodes=[];parameters=[];currentNode=null;currentTransition=null;renderer=null;Start(){this.currentNode=this.nodes[0],this.currentNode.Start(),this.currentTransition=this.currentNode.transitions.find((t=>t.isExit))}Update(){if(this.currentNode.Update(this.renderer),null==this.currentTransition){const t=this.currentNode.transitions;for(let e=0;e<t.length;e++){const r=t[e];let o=!0;for(let t=0;t<r.conditions.length;t++){const e=r.conditions[t],n=this.parameters.find((t=>t.name===e.parameter));if(null==n.value&&(n.type===AnimatorControllerParameterType.Bool?n.value=n.defaultBool:n.type===AnimatorControllerParameterType.Number&&(n.value=n.defaultNumber)),n.type===AnimatorControllerParameterType.Bool){const t=+n.value===e.threshold;e.mode!==AnimatorConditionMode.Equals||t?e.mode===AnimatorConditionMode.NotEquals&&t&&(o=!1):o=!1}if(n.type===AnimatorControllerParameterType.Trigger){const t=+n.value===e.threshold;e.mode!==AnimatorConditionMode.If||t?e.mode===AnimatorConditionMode.IfNot&&t&&(o=!1):o=!1}n.type===AnimatorControllerParameterType.Number&&(e.mode===AnimatorConditionMode.Greater&&n.value<=e.threshold||e.mode===AnimatorConditionMode.Less&&n.value>=e.threshold||e.mode===AnimatorConditionMode.Equals&&n.value!==e.threshold||e.mode===AnimatorConditionMode.NotEquals&&n.value===e.threshold)&&(o=!1)}if(o){this.currentTransition=r;break}}}null!=this.currentTransition&&(this.currentNode.animation.loop&&this.currentTransition.isExit||!(this.currentNode.normalizedTime>=this.currentTransition.exitTime)||(this.currentNode.End(),this.currentNode=this.nodes.find((t=>t.name===this.currentTransition.nextNode)),this.currentNode.Start(),this.currentTransition=this.currentNode.transitions.find((t=>t.hasExitTime))))}}class Animator extends GameBehavior{#r=null;#e=null;get controller(){return this.#e}set controller(r){this.#e=r,this.#e.renderer=this.#r,null!=this.#r&&this.#e.Start()}Start(){this.#r=this.GetComponent("SpriteRenderer"),this.#e.renderer=this.#r,this.#e.Start()}Update(){this.#e?.Update()}LateUpdate(){if(null==this.#e)return;const r=this.#e.parameters.filter((r=>r.type===AnimatorControllerParameterType.Trigger));for(let e=0;e<r.length;e++)r[e].value&&r[e].value===r[e].lastTriggerState&&(r[e].value=!1),r[e].lastTriggerState=r[e].value}#t(r,e){return this.#e.parameters.find((t=>t.name===r&&t.type===e))}GetBool(r){return this.#t(r,AnimatorControllerParameterType.Bool).value}GetNumber(r){return this.#t(r,AnimatorControllerParameterType.Number).value}SetBool(r,e){this.#t(r,AnimatorControllerParameterType.Bool).value=e}SetNumber(r,e){this.#t(r,AnimatorControllerParameterType.Number).value=e}SetTrigger(r){this.#t(r,AnimatorControllerParameterType.Trigger).value=!0}}
class AudioSource extends Behavior{static instances=[];#t=!1;#e=!1;#s=!1;#i=!1;#a=!1;#h=!1;#n=1;#u=1;#l=0;#o=0;#c=new DelegateEvent;#d=null;#p=null;#r=null;#m=null;#g=null;#y=null;playOnAwake=!1;loop=!1;get clip(){return this.#g}set clip(t){this.#g=t,this.Stop()}get volume(){return this.#m.gain.value}set volume(t){this.#n=Math.Clamp(t,0,1),this.#P()}get mute(){return this.#a}set mute(t){this.#a=t,this.#P()}get time(){return this.#l+AudioSettings.latency}set time(t){this.Pause(),this.#o=t,this.UnPause()}get timeSamples(){return parseInt(this.time*AudioSettings.outputSampleRate)}set timeSamples(t){this.Pause(),this.#o=t/AudioSettings.outputSampleRate,this.UnPause()}get isPlaying(){return this.#e&&this.#i}get pitch(){return this.#u}set pitch(t){this.#u=Math.Clamp(t,-3,3),this.#c.Invoke(),null!=this.#p&&(this.#p.playbackRate.value=this.#u)}constructor(){super(),this.#d=AudioSettings.GetContext(),this.#m=this.#d.createGain(),this.#m.connect(this.#d.destination),AudioSource.instances.push(this)}#P(){if(this.#a)return this.#m.gain.value=0;this.#m.gain.value=this.#n,this.#c.Invoke()}Update(){if(!PlayerLoop.isPlaying&&this.#e&&(this.#h=!0,this.Pause()),PlayerLoop.isPlaying&&this.#h&&(this.#h=!1,this.UnPause()),null!=this.#r&&(this.#r.stop(),this.#r.disconnect(),this.#r=null),null!=this.#y&&AudioSettings.dspTime+AudioSettings.latency>=this.#y&&(this.Play(),this.#y=null),this.#i)return this.#l+=AudioSettings.dspDeltaTime*this.#u,void(this.time>=this.#g.length&&(this.#r=this.#p,this.#p=null,this.Stop(),this.loop&&this.Play()));this.playOnAwake&&!this.#t&&(this.Play(),this.#t=!0),this.#e&&!this.#i&&(this.#p=this.#d.createBufferSource(),this.#p.connect(this.#m),this.#p.buffer=this.#g.GetData(),this.#p.playbackRate.value=this.#u,this.#p.start(0,this.#o),this.#l=this.#o,this.#o=0,this.#i=!0)}Play(){this.Stop(),this.#e=!0}PlayScheduled(t){this.#y=t}PlayDelayed(t){this.#y=AudioSettings.dspTime+t,console.log(this.#y)}Pause(){!this.#s&&this.#e&&this.#i&&(null!=this.#p&&(this.#p.stop(),this.#p.disconnect()),this.#o=this.#l,this.#i=!1,this.#e=!1,this.#s=!0)}UnPause(){!this.#s||this.#e||this.#i||(this.#e=!0,this.#s=!1)}Stop(){this.Pause(),this.#o=0,this.#s=!1}PlayOneShot(t,e){const s=this.#d.createGain();s.connect(this.#d.destination);const i=this.#d.createBufferSource();i.connect(s),i.buffer=t.GetData();const updateParams=()=>{s.gain.value=this.volume*Math.max(e??1,0),i.playbackRate.value=this.#u};updateParams(),this.#c.Add(updateParams),i.onended=()=>{this.#c.Remove(updateParams),i.disconnect(),s.disconnect()},i.start()}}class AudioSettings{static#t=!1;static#e=new AudioContext;static#i=new Worker("js/libs/Crystal.Audio/AudioWorker.js");static dspTime=0;static dspDeltaTime=0;static get latency(){return this.#e.baseLatency}static Init(){Application.unloading.Add((()=>this.#t=!0)),this.#i.onmessage=t=>this.#s(t.data),this.#i.postMessage(0)}static#s(t){this.dspTime=t.time,this.dspDeltaTime=t.deltaTime;const e=AudioSource.instances;let i=[];for(let t=0;t<e.length;t++){const s=e[t].gameObject;s.activeSelf&&e[t].enabled?e[t].Update():e[t].isPlaying&&(e[t].Stop(),e[t].Update()),s.destroying&&(e[t].Stop(),e[t].Update(),i.push(e[t]))}for(let t=0;t<i.length;t++)e.splice(e.indexOf(i[t]),1);this.#t&&this.#i.terminate(),this.#i.postMessage(0)}static DecodeBuffer(t){return this.#e.decodeAudioData(t)}static GetContext(){return this.#e}}AudioSettings.Init();class AudioClip{#e=!1;#t="";#r=null;get isLoaded(){return this.#e}get channels(){return this.#r.numberOfChannels}get length(){return this.#r.duration}get samples(){return this.#r.length}get frequency(){return this.#r.sampleRate}constructor(e){this.#t=e}GetData(){return this.#r}async Load(){const e=await fetch(`audio/${this.#t}`),t=await e.arrayBuffer();this.#r=await AudioSettings.DecodeBuffer(t),this.#e=!0}}
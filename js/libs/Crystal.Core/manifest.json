{"name":"Crystal.Core","id":"com.crystal.core","description":"The core module that Crystal runs on. We allow modifications, but it may break the engine. Please tamper with care","version":"2025.6.4f","scripts":["main"],"classes":[{"name":"Vector2","type":0,"args":[{"name":"x","type":"number"},{"name":"y","type":"number"}]},{"name":"Vector4","type":0,"args":[{"name":"x","type":"number"},{"name":"y","type":"number"},{"name":"z","type":"number"},{"name":"w","type":"number"}]},{"name":"Color","type":0,"construction":"return new Color((data.r ?? 0) / 255, (data.g ?? 0) / 255, (data.b ?? 0) / 255, (data.a ?? 255) / 255);","keys":[{"name":"r","type":"number"},{"name":"g","type":"number"},{"name":"b","type":"number"},{"name":"a","type":"number"}]},{"name":"Rect","type":0,"args":[{"name":"x","type":"number"},{"name":"y","type":"number"},{"name":"width","type":"number"},{"name":"height","type":"number"}]},{"name":"Transform","type":0,"args":[{"realName":"localRotation","name":"rotation","type":"number"},{"realName":"localPosition","name":"position","type":"Vector2"},{"realName":"localScale","name":"scale","type":"Vector2"}]},{"name":"GameObject","type":0,"construction":"const transform = await toObject(\"Transform\", data.transform); transform.parent = data.parent; return new GameObject(data.name, data.components, data.active, transform, data.id);"},{"name":"Material","type":0,"construction":"const output = (typeof data === \"string\") ? Resources.Find(data).Duplicate() : new Material(Shader.Find(data.vertexShader ?? \"Default/Standard\", \"VERTEX\"), Shader.Find(data.fragmentShader ?? \"Default/Standard\", \"FRAGMENT\")); for (let i = 0; i < data.properties?.length ?? 0; i++) { output.SetProperty(data.properties[i].name, data.properties[i].type, data.properties[i].value); } return output;"},{"name":"Material","type":1,"construction":"const output = new Material(Shader.Find(data.vertexShader ?? \"Default/Standard\", \"VERTEX\"), Shader.Find(data.fragmentShader ?? \"Default/Standard\", \"FRAGMENT\")); for (let i = 0; i < data.properties?.length ?? 0; i++) { output.SetProperty(data.properties[i].name, data.properties[i].type, data.properties[i].value); } return output;"},{"name":"Texture","type":0,"construction":"return Resources.Find(data);"},{"name":"Texture","type":1,"construction":"const output = new Texture(data.src); await output.Load(); if (data.sprite?.pivot != null) output.sprites[0].pivot = await toObject(\"Vector2\", data.sprite.pivot); if (data.sprite?.border != null) output.sprites[0].border = await toObject(\"Vector4\", data.sprite.border); const sprites = data.sprites ?? []; for (let i = 0; i < sprites.length; i++) { const sprite = sprites[i]; const rect = sprite.rect == null ? null : await toObject(\"Rect\", sprite.rect); const newSprite = new Sprite(sprite.name, output, rect); if (sprite.pivot != null) newSprite.pivot = await toObject(\"Vector2\", sprite.pivot); if (sprite.border != null) newSprite.border = await toObject(\"Vector4\", sprite.border); output.sprites.push(newSprite); } return output;","args":[{"name":"pixelPerUnit","type":"number"},{"name":"wrapMode","type":"number"},{"name":"filterMode","type":"number"}]},{"name":"Sprite","type":0,"construction":"if (data.name != null) return Resources.Find(data.texture).sprites.find(item => item.name === data.name).Duplicate(); return Resources.Find(data.texture).sprites[data.index ?? 0].Duplicate();","args":[{"name":"pivot","type":"Vector2"},{"name":"rect","type":"Rect"}]},{"name":"SpriteLibraryCategory","type":0,"construction":"const output = new SpriteLibraryCategory(); for (let i = 0; i < data.entries?.length ?? 0; i++) output.entries.push({ label: data.entries[i].label, sprite: await toObject(\"Sprite\", data.entries[i].sprite) }); return output;"},{"name":"SpriteLibraryAsset","type":1,"args":[{"name":"categories","array":true,"type":"SpriteLibraryCategory"},{"name":"mainLibrary","type":"SpriteLibraryAsset"}]},{"name":"SpriteLibraryAsset","type":0,"construction":"return Resources.Find(data);"},{"name":"SpriteLibrary","type":0,"args":[{"name":"asset","type":"SpriteLibraryAsset"},{"name":"categories","array":true,"type":"SpriteLibraryCategory"}]},{"name":"SpriteResolver","type":0,"args":[{"name":"category","type":"string"},{"name":"label","type":"string"}]},{"name":"Camera","type":0,"args":[{"name":"orthographicSize","type":"number"},{"name":"backgroundColor","type":"Color"}]},{"name":"SpriteRenderer","type":0,"construction":"return new SpriteRenderer(await toObject(\"Sprite\", data.sprite), await toObject(\"Material\", data.material));","args":[{"name":"color","type":"Color"},{"name":"sortingLayer","type":"number"},{"name":"sortingOrder","type":"number"},{"name":"drawMode","type":"number"},{"name":"size","type":"Vector2"}],"keys":[{"name":"sprite","type":"Sprite"},{"name":"material","type":"Material"}]},{"name":"Grid","type":0,"args":[{"name":"cellGap","type":"Vector2"},{"name":"cellSize","type":"Vector2"}]}]}